#!/bin/bash

set -e

if [[ ! -n $1 ]]; then
    echo "Usage: $(basename $0) <module_name> [OPTS]"
    exit -1
fi

CONFIG_FILE=$1.json
# Search config in the following locations:
# 1) Current directory
# 2) /home/$USER/.config/sonbake
# 3) /etc/sonbake
if [ -e $CONFIG_FILE ]; then
    CONFIG_FILE=$(realpath $CONFIG_FILE)
elif [ -e "/home/$USER/.config/sonbake/$CONFIG_FILE" ]; then
    CONFIG_FILE=/home/$USER/.config/sonbake/$CONFIG_FILE
elif [ -e "/etc/sonbake/$CONFIG_FILE" ]; then
    CONFIG_FILE="/etc/sonbake/$CONFIG_FILE"
else
    echo "CONFIG_FILE \"$CONFIG_FILE\" isn't found"
    exit -1
fi
shift

SONIC_DIR=$(jq -r '.sonicDir' $CONFIG_FILE)
PACKAGE_NAME=$(jq -r '.packageName' $CONFIG_FILE)
PACKAGE_DEB_PATH=$(jq -r '.packageDebPath' $CONFIG_FILE)
PACKAGE_DEB_NAME=$(basename $PACKAGE_DEB_PATH)
DOCKER_SLAVE="${PACKAGE_NAME}-slave"
WORK_DIR=$(jq -r '.workDir' $CONFIG_FILE)
DOCKER_WORK_DIR=/sonic/$WORK_DIR/
TARGETS="all"
REMOTE_HOSTS=""
DEB_FILENAME="$PACKAGE_NAME.deb"
AUTO_YES=false
CLEAN=false
SCREEN_LOG="/tmp/screen-${DOCKER_SLAVE}.log"

# Parse flags
while [[ $# -gt 0 ]]; do
    case "$1" in
        -y|--yes)
            AUTO_YES=true
            shift
            ;;
        --sonic_dir)
            SONIC_DIR=$2
            shift 2
            ;;
        -t|--targets)
            TARGETS=$2
            shift 2
            ;;
        -r|--remote_hosts)
            REMOTE_HOSTS=$2
            shift 2
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        *)
            shift
            ;;
    esac
done

echo "CONFIG_FILE:        $CONFIG_FILE"
echo "SONIC_DIR:          $SONIC_DIR"
echo "PACKAGE_NAME:       $PACKAGE_NAME"
echo "PACKAGE_DEB_PATH:   $PACKAGE_DEB_PATH"
echo "DOCKER_SLAVE:       $DOCKER_SLAVE"
echo "WORK_DIR:           $WORK_DIR"
echo "DOCKER_WORK_DIR:    $DOCKER_WORK_DIR"
echo "TARGETS:            $TARGETS"
echo "REMOTE_HOSTS:       $REMOTE_HOSTS"
echo "DEB_FILENAME:       $DEB_FILENAME"
echo "AUTO_YES:           $AUTO_YES"
echo "CLEAN:              $CLEAN"
echo "SCREEN_LOG:         $SCREEN_LOG"
echo

revert_changes() {
    sed -i '/Intentional fail to allow fast rebuild/d' slave.mk
    if [ -e "$SONIC_DIR/$PACKAGE_DEB_NAME" ]; then
        mv $SONIC_DIR/$PACKAGE_DEB_NAME $PACKAGE_DEB_PATH
    fi
}

destroy_slave() {
    docker rm -f $DOCKER_SLAVE
    exit
}

slave_sh() {
    docker exec -it -w $DOCKER_WORK_DIR $DOCKER_SLAVE bash -c "$*"
}

create_docker() {
    # If docker doesn't exists, create a new one
    if ! docker inspect "$DOCKER_SLAVE" &>/dev/null; then
        # Remove previous screen log, since we rely on the specific log pattern
        # on starting build
        rm -f $SCREEN_LOG

        # Preserve original .deb.
        if [ -e $PACKAGE_DEB_PATH ]; then
            mv $PACKAGE_DEB_PATH $SONIC_DIR/$PACKAGE_DEB_NAME
        fi

        # Make slave.mk fail when trying to build target deb by inserting error after "SETUP_OVERLAYFS_FOR_DPKG_ADMINDIR".
        # Since sonic build system first install all dependencies and we use KEEP_SLAVE_ON=yes to preserve slave container,
        # when we reach fail, we have a slave with all dependencies needed and we then can do build much faster by
        # performing direct commands to build binaries but not whole deb package.
        sed -i "/SETUP_OVERLAYFS_FOR_DPKG_ADMINDIR/a \\
\t\tif [ \"\$(addprefix \$(DEBS_PATH)/,\$*)\" = \"$PACKAGE_DEB_PATH\" ]\; then echo \"Intentional fail to allow fast rebuild. Remove if not expected.\" >&2; exit 1; fi" slave.mk

        # KEEP_SLAVE_ON=yes will start docker in interactive shell session and attach to it. In order not to
        # attach current session in the script, we use screen utility.
        echo "Creating docker container $DOCKER_SLAVE"
        echo "Creating screen for container session $DOCKER_SLAVE"
        screen -dmL -Logfile $SCREEN_LOG -S $DOCKER_SLAVE bash -c "KEEP_SLAVE_ON=yes SONIC_BUILDER_EXTRA_CMDLINE='--name $DOCKER_SLAVE' make $PACKAGE_DEB_PATH" $SCREEN_LOG

        # Wait until all dependencies are installed (it happens when we see error we injected in slave.mk)
        echo "Waiting for dependencies... Check $SCREEN_LOG to make sure we aren't blocked"
        timeout 1800 bash -c "until grep -q 'Intentional fail to allow fast rebuild' '$SCREEN_LOG'; do sleep 1; done" || {
            echo "Couldn't load dependencies for $PACKAGE_NAME"
            revert_changes
            docker rm -f $DOCKER_SLAVE
            exit -1
        }
        revert_changes

        # Just after first entering docker, we want to perform dpkg-buildpackage for autoconfigure and initial infrastracture
        # initialization. Allow fail here.
        set +e
        slave_sh "DEB_BUILD_OPTIONS='nocheck noopt nostrip' dpkg-buildpackage -j8 -b -us -uc --no-post-clean -nc"
        set -e
    else
        echo "docker container $DOCKER_SLAVE exists"
    fi
}

build_targets() {
    if [ -z "$TARGETS" ]; then
        echo "No targets specified (-t|--targets). Finished."
        exit
    fi

    for target in $TARGETS; do
        # Touch configured files to force rebuilding. This is needed, since some modules won't
        # rebuild when headers were changes.
        local touch_files=$(jq -r ".buildTargets.${target}.touchFiles" $CONFIG_FILE)
        for file in $touch_files; do
            # touch only existing files
            if [ -e $WORK_DIR/$file ]; then
                touch $WORK_DIR/$file
            else
                echo "NOTE: specified touch file $file doesn't exists, skipping it"
            fi
        done

        local make_subdir=$(jq -r ".buildTargets.${target}.makeSubdir" $CONFIG_FILE)
        slave_sh "make -C $DOCKER_WORK_DIR/$make_subdir $target"
    done
}

package_to_deb() {
    local sysroot=$(mktemp -d)
    for target in $TARGETS; do
        # installFiles is dict with key=src value=dst
        jq -r ".buildTargets.${target}.installFiles | to_entries[] | \"\(.key) \(.value)\"" $CONFIG_FILE | while read -r src dst; do
            echo "install -D \"$WORK_DIR/$src\" \"$sysroot/$dst\""
            install -D "$WORK_DIR/$src" "$sysroot/$dst"
        done
        
        # installSourceFiles are needed for debug via gdb. They must reside in the same
        # dir as they reside in $DOCKER_SLAVE.
        for source_file in $(jq -r ".buildTargets.${target}.installSourceFiles[]? // empty" "$CONFIG_FILE"); do
            echo "install -D \"$WORK_DIR/$source_file\" \"$sysroot/$DOCKER_WORK_DIR/$source_file\""
            install -D "$WORK_DIR/$source_file" "$sysroot/$DOCKER_WORK_DIR/$source_file"
        done
    done

    # Create .deb package as each container has dpkg, while tar messes up with file permissions alot.
    mkdir -p ${sysroot}/DEBIAN
    cat <<EOF > ${sysroot}/DEBIAN/control
Package: $PACKAGE_NAME
Version: 1.0
Architecture: amd64
EOF
    dpkg-deb -z 0 --build ${sysroot} /tmp/$PACKAGE_NAME.deb

    rm -rf $sysroot
}

install_to_remote() {
    if [ -z $REMOTE_HOSTS ]; then
        echo "No remote hosts specified (-r|--remote_hosts). Finished."
        exit
    fi

    for remote in $REMOTE_HOSTS; do
        scp /tmp/$DEB_FILENAME $remote:/tmp/

        # Install to remost host unconditionally (needed for sources /sonic to be available for gdb).
        ssh $remote "sudo dpkg -i --force-all /tmp/$DEB_FILENAME"
        if ! ssh $remote "grep -q 'directory /sonic/$WORK_DIR' /etc/gdb/gdbinit"; then
            ssh $remote "sudo chmod o+w /etc/gdb/gdbinit; echo 'directory /sonic/$WORK_DIR' >> /etc/gdb/gdbinit"
        fi

        for target in $TARGETS; do
            # If container is set, install to remote host docker container
            local container=$(jq -r ".buildTargets.${target}.container" $CONFIG_FILE)
            if [ "$container" != "null" ] && [ "$container" != "host" ]; then
                ssh $remote "docker cp /tmp/$DEB_FILENAME $container:/; docker exec $container dpkg -i --force-all /$DEB_FILENAME"
            fi
        done
    done
}

pushd $SONIC_DIR > /dev/null
trap revert_changes SIGINT

if $CLEAN; then
    echo "Cleaning and destroying $DOCKER_SLAVE"
    revert_changes
    docker rm -f $DOCKER_SLAVE
    exit -1
fi

if [ $TARGETS = "all" ]; then
    TARGETS=$(jq -r '.buildTargets | keys | join(" ")' $CONFIG_FILE)
fi

create_docker
build_targets
package_to_deb
install_to_remote
